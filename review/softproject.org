#+title: 软件工程复习笔记
* 软件工程基本概念
**  软件工程的基本原则

*** 抽象，信息隐藏，模块化，局部化
** 软件开发主要方法

*** 结构化方法，面向对象方法，形式化开发方法。
** 软
件过程模型
*** 瀑布模型
*定义* :将软件开发过程分解为可行性研究等几个阶段，并按照各阶段的目标和任务逐步进行开发，直至确认测试，向
用户提交最终软件制品为止。

*优点* :瀑布模型的可行性研究、需求、设计、编码、测试分离，有利于软件的体系结构设计，规范了软件开发活动，
有利于开发人员的组织、管理。对于规模较小、软件需求比较稳定的项目或子系统，采用瀑布模型能够显著提高软件开发的质量和效率。

*缺点* :开发周期长，需求分析必须彻底无遗漏；上一阶段的错误会影响到下一阶段。应用与单主机计算模式下的软件开发过程。
*** 原型模型
*定义* :根据用户需求快速开发出一原型，然后向用户展示待开发软件系统的全部或部分功能和性能，在征求用户的意
见过程中，进一步修改、完善确认软件系统的需求并和用户达到一致的的理解。

*优点* :能够统一用户和开发人员对于需求的理解，进而有助于需求定义和确认。

*缺点* ：准确的原型设计比较困难，也不利于开发人员的创新。适用于对所开发领域比较熟悉且有快速的原型开发工
具或进行产品移植升级时。

*** 螺旋模型
*定义* :是一种演化软件开发过程模型，兼顾上述两种模型迭代和系统化，严格监控的特点，还引入了独有的分析
分析。

*优点* :设计灵活；以小分段构建大型系统使成本计算变得简单容易；客户全程参与保证项目不偏离方向和可控性。

*缺点* :迭代次数过多会增加开发成本和周期。使用与大规模的软件项目开发。
* 软件需求
** 软件需求的分类
主要分为功能需求和非功能需求(其中非功能需求包含质量需求和约束性需求)
1. 功能需求:指利益相关方要求目标软件系统应该具有的功能
2. 质量需求:指利益相关方对目标软件系统的质量要求(性能,可靠性等)
3. 约束性需求:指利益相关方对目标软件系统在项目预算,完成时间,技术选型,必须遵循的标准与规范等方面提出的要求
以及由预期的开发,运行环境的特征而导致的针对目标软件系统的约束
** 软件需求的质量要素

**** 正确性:包含真实性,一致性,精确性,无冗性
1. 真实性:指每个需求项能够真实反映利益相关方的需求
2. 一致性:指需求项内部,需求项之间没有逻辑冲突
3. 精确性:指需求项的描述不会引起二义或多义理解
4. 无冗余:指每项需求在软件需求模型中仅出现一次,多项需求之间不存在语义重叠

**** 完全性
指所有需求项构成的全集完整地覆盖所有必须在目标软件产品中实现的利益相关方需求,尤其不能遗漏重要或紧迫的
需求.

**** 可行性
指在实际资源约束条件下,软件需求能够被完整实现的可能性
** 需求调查的基本方法 
- 访谈和会议
- 调查问卷
- 业务文档分析
- 现场观摩
** 需求建模的基本方法
****  抽象
**** 分解
*原则*:各个子问题具有较强独立性,子问题之间具有松耦合性
**** 多视点分析
从各个角度分别对应用问题进行理解,分析,建模,然后综合成为完整的需求模型
** 需求工程中的活动 
1. 需求工程策策划
2. 需求获取
3. 需求分析 
4. 需求规范化
5. 需求验证
6. 总结
* UML 
** 用例图
主要有 *参与者* 和 *用例*
**** 用例之间的关系
包含,扩展,继承 
** 类图 
描述对象软件系统的静态结构
** 活动图
描述实体为完成某项功能而执行的操作序列
包含 *控制流* 和 *信息流*
** 状态图
描述一个实体(一个类的典型对象,软件系统,软构件或系统)的行为
*基本概念* 状态,事件,活动,动作
* 软件设计的基本原则 
** 抽象与逐步求精
** 模块化
1. 模块分解
   将软件系统划分为若干个相对独立的部件(称为模块)

2. *内聚度*
   表示一个模块内部各成分彼此关联的紧密程度

3. *耦合度*
   表示软件结构中多个模块之间的关联程度

4. _强内聚,松耦合原则_ 
- 强内聚要求一个软件模块由逻辑相关性很强的代码组成,仅负责单项职责
- 松耦合要求软件系统中各模块尽可能独立地完成各自的职责,模块之间的接口尽可能少而且简单

** 信息隐藏
*要求*:模块应该设计得使得其所含信息对于那些不需要这些信息的模块不可访问,模块之间仅交换那
些为完成系统功能必须交换的信息

*优点*:不仅支持模块的并行开发,而且可以减少测试和后期维护的工作量

** 关注点分离
*关注点*:指问题求解者针对概念,任务,目标的某个部分或侧面的聚焦

*要求*:设计师将若干性质不同的关注点分离开来,以便软件开发者能够在适当的时间分别处理不同的
关注点,再整合,形成局部或全局的软件解

**** 分离方法
+ 职责划分:表现层,web服务层,业务逻辑层,数据层
+ 结构-细节:类,构件,模块
+ 通用-专用:特定应用,领域通用,技术基础
** 软件设计活动
1. 设计决策
2. 体系结构设计
3. 人机交互设计
4. 详细设计
5. 设计整合与验证
6. 总结
* 体系结构设计模式
*设计模式*:指以设计复用为目的,采用一种良好定义的,正规的,一致的方式记录的软件设计经验
** 通用的体系结构模式

*** 分层模式
将软件系统按照抽象级别逐次递增或递减的顺序划分

*关键*:合理地确立一系列抽象级别

*优点*:松耦合,可替换性,可复用性,标准化
*** 管道与过滤器模式
将软件系统的功能实现为一系列的处理步骤

*评价*:采用管道与过滤器模式,可以通过升级,更换部分过滤器构件以及处理步骤的重组来实现软件系统的扩展和进化
但此模式仅适合于采取批处理方式的软件系统,不适合交互式,事件驱动式系统

*** 黑板模式
* 结构化软件开发  
面向数据流的分析方法
* 软件维护 
** 分类
- 纠错性维护:为诊断和改正软件系统中潜藏的缺陷而进行的活动
- 适应性维护:为适应软件运行环境变化(操作系统变更,硬件更新)而修改软件的活动
- 完善性维护:根据用户在软件使用过程中提出的一些新需求而实施的维护活动
- 预防性维护:优化软件系统结构和可理解性,改善可维护性和可靠性
** 软件的可维护性
*定义*:软件被理解,改正和改进的难易程度

*影响因素*:
- 软件和文档的可理解性
- 文档是否齐全
- 软件的结构是否合理
- 开发人员素质
- 操作系统的标准化程度
- 维护工具和环境
* 软件测试
** 定义 
使用人工或自动手段运行软件系统的过程,目的在于检验系统是否满足规定的需求,或确定预期结果与实际结果之间的差异
** 目的 
检验软件是否满足需求(包含功能需求和非功能需求)

